name: ClaudeCode - SlangPy Assistant

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: read
  id-token: write

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ vars.AWS_SECRET_ACCESS_KEY }}
  CI_PYTHON: "3.10"

jobs:
  claude:
    name: Claude Code Assistant
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude')))

    runs-on: ubuntu-latest
    timeout-minutes: 360

    # Cancel previous runs on new pushes
    concurrency:
      group: claude-${{ github.event.issue.number || github.event.pull_request.number || github.run_id }}
      cancel-in-progress: true

    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          lfs: true

      # Setup MSVC.
      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1

      # Setup CMake/Ninja.
      - name: Setup CMake/Ninja
        uses: lukka/get-cmake@latest

      # Setup Python.
      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'
      # Complete Claude execution with authentication, setup, and execution
      - name: Run Claude Code
        id: claude
        uses: szihs/slang/.github/actions/claude-code-runner@master
        with:
          # Authentication (these secrets must be configured in your repository)
          llmgw-id: ${{ secrets.LLMGW_ID }}
          llmgw-secret: ${{ secrets.LLMGW_SECRET }}
          llmgw-token-url: ${{ secrets.LLMGW_TOKEN_URL }}
          github-token-fallback: ${{ secrets.GITHUB_TOKEN }}

          # Repository-specific setup for SlangPy
          setup-commands: |
            set -euo pipefail
            echo "üèóÔ∏è Setting up SlangPy environment..."

            # Cleanup submodules
            git submodule foreach --recursive git clean -ffdx
            git submodule foreach --recursive git reset --hard

            # Setup Linux dependencies (matches ci.yml Setup Linux step)
            sudo apt update && sudo apt install -y libxinerama-dev libxcursor-dev xorg-dev libglu1-mesa-dev pkg-config

            # Setup Python environment (matches ci.yml Setup Python environment step)
            python -m pip install -r requirements-dev.txt
            python -m pip install pytest-github-actions-annotate-failures

            # Setup vcpkg cache directory (matches ci.yml vcpkg caching)
            export VCPKG_DEFAULT_BINARY_CACHE="${{ github.workspace }}/vcpkg-cache"
            mkdir -p "${{ github.workspace }}/vcpkg-cache"

            # SlangPy build sequence (matches ci.yml exact order)
            python tools/ci.py setup
            python tools/ci.py configure
            python tools/ci.py build

            # Temporary to validate setup : Require specific hosted runners
            # python tools/ci.py unit-test-python
            # python tools/ci.py test-examples -p


            echo "‚úÖ SlangPy environment setup completed"

          # Custom instructions for SlangPy
          custom-instructions: |
            # SlangPy Build System Information:
            - OS: Ubuntu Linux
            - Project is pre-built and ready for development tasks

            # SlangPy Build Commands (use tools/ci.py for all tasks):
            - Setup: `python tools/ci.py setup`
            - Configure: `python tools/ci.py configure`
            - Build: `python tools/ci.py build`
            - Python Tests: `python tools/ci.py unit-test-python -p` or `pytest slangpy/tests -ra`
            - C++ Tests: `python tools/ci.py unit-test-cpp` (Requires GPU Setup - Currently we don't have)
            - Example Tests: `python tools/ci.py test-examples -p` or `pytest samples/tests -vra`
            - Type Checking: `python tools/ci.py typing-check-python` or `pyright`
            - Format code: `pre-commit run --all-files` or `black . --line-length 100`

            # SlangPy Architecture Overview:
            SlangPy is a cross-platform Python library enabling GPU shader execution with three layers:
            1. **Python Layer** (`slangpy/`): High-level Module, Function, Device classes
            2. **C++ Binding Layer** (`src/slangpy_ext/`): Nanobind-based Python-C++ interface
            3. **Core SGL Layer** (`src/sgl/`): Low-level GPU abstraction and shader compilation

            Key components:
            - **Module**: Container for Slang shader code (.slang files)
            - **Function**: Callable GPU functions with automatic marshalling
            - **Device**: GPU context managing resources and compute dispatch
            - **Buffer/Texture**: GPU memory with Python array interface

            # IMPORTANT: Use specialized agents for efficient task execution following this workflow:

            ## Agent Delegation Workflow:
            1. **Initial Analysis & Planning**:
               - Use `@agent-general-purpose` for initial task analysis and "think-hard" planning of complex tasks
               - Break down requirements and identify needed expertise

            # Development Best Practices:
            - Use `python tools/ci.py` for all build/test operations
            - PyTorch integration is automatic when available
            - Hot-reload is supported for shader development
            - Pre-commit hooks enforce formatting (Black for Python, clang-format for C++)
            - Use CMake presets for platform-specific builds (windows-msvc, linux-gcc, macos-arm64-clang)

          # MCP configuration for deepwiki
          mcp-config: |
            {
              "mcpServers": {
                "deepwiki": {
                  "type": "sse",
                  "url": "https://mcp.deepwiki.com/sse"
                }
              }
            }

          # Advanced configuration (using repository variables/secrets)
          model: ${{ vars.ANTHROPIC_MODEL }}
          aws-region: ${{ vars.AWS_REGION }}
          bedrock-base-url: ${{ vars.ANTHROPIC_BEDROCK_BASE_URL }}
          small-fast-model: ${{ vars.ANTHROPIC_SMALL_FAST_MODEL }}

          # Additional tools for deepwiki (SlangPy specific)
          allowed-tools: "Bash,View,GlobTool,GrepTool,BatchTool,Write,mcp__deepwiki__ask_question"
